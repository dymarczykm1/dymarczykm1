{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d843fda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Importing pandas for dataframe\n",
    "import pandas as pd\n",
    "\n",
    "#Importing both the index csv and portfolio holdings\n",
    "df_index = pd.read_csv(r'C:\\Users\\Redacted\\Desktop\\Python Files\\Index.csv')\n",
    "df_port = pd.read_csv(r'C:\\Users\\Redacted\\Desktop\\Python Files\\Bonds.csv')\n",
    "\n",
    "#Removing column truncation and bringing in max rows and column width\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "pd.set_option('display.max_rows', None)\n",
    "\n",
    "#Sorting values to show highest weighting in the index\n",
    "df_index.sort_values(by='Weight', ascending=False)\n",
    "\n",
    "#Bringing in only coupon and weight columns of the index\n",
    "df_index = df_index[['Coupon','Weight']]\n",
    "\n",
    "#Summing the weightings of the index by coupon\n",
    "df_index = df_index.groupby('Coupon').sum()\n",
    "\n",
    "#Bringing in coupon and % port columns from holdings detail\n",
    "df_port = df_port[['Cpn', '% Port']]\n",
    "\n",
    "#Again making sure to sum the weights of the portfolio by coupon\n",
    "df_port = df_port.groupby('Cpn').sum()\n",
    "\n",
    "#Renaming index column\n",
    "df_index = df_index.rename({'Weight': '% of Index',}, axis=1)\n",
    "\n",
    "#Combining both data frames\n",
    "result = pd.concat([df_index, df_port], axis=1)\n",
    "\n",
    "#Plotting on bar chart\n",
    "result.plot.bar()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
